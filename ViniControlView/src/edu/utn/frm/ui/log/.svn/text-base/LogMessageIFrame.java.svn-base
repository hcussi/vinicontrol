/*
 * LogMessageIFrame.java
 *
 * Created on 04/08/2009, 17:09:11
 */
package edu.utn.frm.ui.log;

import edu.utn.frm.action.file.FileExtensionFilter;
import edu.utn.frm.action.file.JFileChooser;
import edu.utn.frm.action.log.IMessageLogger;
import edu.utn.frm.action.log.LogManager;
import edu.utn.frm.ui.IconManager;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author Proyecto
 */
public class LogMessageIFrame extends javax.swing.JInternalFrame implements IMessageLogger{

    /** Creates new form GrupoTanqueIFrame */
    public LogMessageIFrame() {
        initComponents();
        txtMessage.setText( LogManager.getInstance().setLogger(this) );
        this.setFrameIcon(IconManager.getInstance().getFrameIcon());
        //sPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(" Giros Comerciales [" + model.getRowCount() + "] "));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sPanel = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        salirButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        limpiarButton = new javax.swing.JButton();

        setIconifiable(true);
        setTitle("Mensajes de Control");

        sPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mensajes de Log"));
        sPanel.setName("sPanel"); // NOI18N

        txtMessage.setColumns(20);
        txtMessage.setEditable(false);
        txtMessage.setRows(5);
        txtMessage.setName("txtMessage"); // NOI18N
        sPanel.setViewportView(txtMessage);

        salirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/cerrar.png"))); // NOI18N
        salirButton.setText("Cerrar");
        salirButton.setName("salirButton"); // NOI18N
        salirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirButtonActionPerformed(evt);
            }
        });

        guardarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/guardar.png"))); // NOI18N
        guardarButton.setText("Guardar");
        guardarButton.setName("guardarButton"); // NOI18N
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        limpiarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/limpiar.png"))); // NOI18N
        limpiarButton.setText("Limpiar");
        limpiarButton.setName("limpiarButton"); // NOI18N
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guardarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limpiarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 493, Short.MAX_VALUE)
                        .addComponent(salirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirButtonActionPerformed
        dispose();
}//GEN-LAST:event_salirButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        guardar();
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
        limpiar();
    }//GEN-LAST:event_limpiarButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton guardarButton;
    private javax.swing.JButton limpiarButton;
    private javax.swing.JScrollPane sPanel;
    private javax.swing.JButton salirButton;
    private javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables

    public synchronized void setMessage(String newMessage) {
        StringBuffer buffer = new StringBuffer(txtMessage.getText());
        buffer.append(newMessage);
        txtMessage.setText(buffer.toString());
    }

    private void guardar() {
        StringBuffer s = LogManager.getInstance().getMessageOriginal();
        byte[] file = s.toString().getBytes();
        guardarArchivo(file);
    }

    private void limpiar(){
        LogManager.getInstance().limpiar();
        txtMessage.setText("");
    }

    protected JFileChooser jFileChooser;

    public JFileChooser getJFileChooserInforme(FileExtensionFilter filter) {
        if (jFileChooser == null) {
            jFileChooser = new JFileChooser();
            jFileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
            jFileChooser.setWarnOnWriteOver(true);
            jFileChooser.setAcceptAllFileFilterUsed(false);
            jFileChooser.setMultiSelectionEnabled(false);
            jFileChooser.setName("log");
            FileExtensionFilter fef = filter;

            jFileChooser.setFileFilter(fef);
        }
        return jFileChooser;
    }

    private void guardarArchivo(byte[] fileArray) {
        FileExtensionFilter filter = new FileExtensionFilter.TextFilter();
        int result = getJFileChooserInforme(filter).showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = getJFileChooserInforme(filter).getSelectedFile();
            if (file == null) {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado ning√∫n archivo");
                return;
            } else {
                try {
                    OutputStream stream = new FileOutputStream(file);
                    BufferedOutputStream bos = new BufferedOutputStream(stream);
                    bos.write(fileArray);
                    bos.flush();
                    stream.close();
                    bos.close();
                    JOptionPane.showMessageDialog(this, "Se ha guardado el log exitosamente");

                } catch (IOException ex) {

                    JOptionPane.showMessageDialog(this, "Se ha producido un error al guardar " +
                            "el log. " + ex.getMessage(), "Error al guardar", JOptionPane.ERROR_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "La escritura del archivo ha fallado");
                }
            }
        }
    }


}