/*
 * ProcesoIFrame.java
 *
 * Created on 04/08/2009, 17:09:11
 */
package edu.utn.frm.ui.proceso;

import edu.utn.frm.action.comunicacion.GestorGeneralEstado;
import edu.utn.frm.action.exception.GestorGeneralEstadoException;
import edu.utn.frm.action.exception.ReporteException;
import edu.utn.frm.action.exception.TrazabilidadException;
import edu.utn.frm.action.file.FileExtensionFilter;
import edu.utn.frm.action.file.JFileChooser;
import edu.utn.frm.action.proceso.ProcesoAbm;
import edu.utn.frm.dao.generic.ValidateException;
import edu.utn.frm.entities.alarma.AlarmaNivelAzucar;
import edu.utn.frm.entities.alarma.AlarmaNivelCapacidad;
import edu.utn.frm.entities.alarma.AlarmaRemontaje;
import edu.utn.frm.entities.alarma.AlarmaTemperatura;
import edu.utn.frm.entities.proceso.EstadoProceso;
import edu.utn.frm.entities.proceso.Proceso;
import edu.utn.frm.entities.producto.MostoEnTanque;
import edu.utn.frm.entities.tanque.Tanque;
import edu.utn.frm.entities.utils.DateOperations;
import edu.utn.frm.ui.IconManager;
import edu.utn.frm.ui.utils.GenericComboBoxModel;
import javax.swing.JOptionPane;

import edu.utn.frm.ui.utils.GenericTableModel;
import edu.utn.frm.ui.utils.Utiles;
import java.text.ParseException;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.text.MaskFormatter;
import org.apache.log4j.Logger;

/**
 *
 * @author Proyecto
 */
public class ProcesoIFrame extends javax.swing.JInternalFrame {

    private static Logger logger = Logger.getLogger(ProcesoIFrame.class);
    private GenericTableModel<Proceso> model = new GenericTableModel<Proceso>(
            new String[]{"Descripción", "Fecha Inicio", "Fecha Fin", "Estado del Proceso", "Tanque", "Producto"},
            new String[]{"descripcion", "fechaInicioString", "fechaFinString", "estadoProceso.descripcion", "tanque.descripcion", "mostoEnTanque.descripcion"});
    private GenericTableModel<AlarmaTemperatura> modelTemperatura = new GenericTableModel<AlarmaTemperatura>(
            new String[]{"Fecha", "Hora", "Estado", "Temperatura"},
            new String[]{"fechaString", "horaString", "estadoAlarma.descripcion", "temperatura"});
    private GenericTableModel<AlarmaNivelAzucar> modelAzucar = new GenericTableModel<AlarmaNivelAzucar>(
            new String[]{"Fecha", "Hora", "Estado", "Nivel"},
            new String[]{"fechaString", "horaString", "estadoAlarma.descripcion", "nivelAzucar"});
    private GenericTableModel<AlarmaNivelCapacidad> modelContenido = new GenericTableModel<AlarmaNivelCapacidad>(
            new String[]{"Fecha", "Hora", "Estado", "Nivel"},
            new String[]{"fechaString", "horaString", "estadoAlarma.descripcion", "nivelCapacidad"});
    private GenericTableModel<AlarmaRemontaje> modelRemontaje = new GenericTableModel<AlarmaRemontaje>(
            new String[]{"Fecha", "Hora", "Estado", "Iniciado"},
            new String[]{"fechaString", "horaString", "estadoAlarma.descripcion", "inicioString"});
    private ProcesoAbm gestorAbm = new ProcesoAbm();
    private GenericComboBoxModel<EstadoProceso> modelBuscarEstadoProceso =
            new GenericComboBoxModel(buscarTodosEstadosProceso(), "descripcion", true);
    private GenericComboBoxModel<Tanque> modelBuscarTanque =
            new GenericComboBoxModel(buscarTodosTanques(), "descripcion", true);
    private GenericComboBoxModel<MostoEnTanque> modelBuscarProductos =
            new GenericComboBoxModel(buscarTodosProductos(), "descripcion", true);
    private GenericComboBoxModel<EstadoProceso> modelEstadoProceso =
            new GenericComboBoxModel(buscarTodosEstadosProceso(), "descripcion");
    private GenericComboBoxModel<Tanque> modelTanque =
            new GenericComboBoxModel(buscarTodosTanques(), "descripcion");
    private MaskFormatter maskDuracion;

    /** Creates new form ProcesoIFrame */
    public ProcesoIFrame() {
        try {
            maskDuracion = new MaskFormatter("##:##:##");
            maskDuracion.setPlaceholderCharacter('_');
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        initComponents();
        habilitarPanelDatos(false);
        model.setRows(gestorAbm.buscar());
        buscarEstadoProcesoComboBox.setModel(modelBuscarEstadoProceso);
        buscarProductoComboBox.setModel(modelBuscarProductos);
        buscarTanqueComboBox.setModel(modelBuscarTanque);
        this.setFrameIcon(IconManager.getInstance().getFrameIcon());
        //sPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(" Giros Comerciales [" + model.getRowCount() + "] "));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datosDialog = new javax.swing.JDialog();
        datosPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        descripcionText = new javax.swing.JTextField();
        limpiarDatosEntityButton = new javax.swing.JButton();
        estadoComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tanqueComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        fechaInicioDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        fechaFinDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        horaInicioText = new javax.swing.JFormattedTextField( maskDuracion );
        horaFinText = new javax.swing.JFormattedTextField( maskDuracion );
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        sPanel1 = new javax.swing.JScrollPane();
        alarmaTemperaturaTabla = new javax.swing.JTable();
        informeTemperaturaButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sPanel2 = new javax.swing.JScrollPane();
        alarmaAzucarTabla = new javax.swing.JTable();
        informeAzucarButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        sPanel3 = new javax.swing.JScrollPane();
        alarmaContenidoTabla = new javax.swing.JTable();
        InformeVolumenButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        sPanel4 = new javax.swing.JScrollPane();
        alarmaRemontajeTabla = new javax.swing.JTable();
        informeRemontajeButton = new javax.swing.JButton();
        cerrarButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        detenerProcesoButton = new javax.swing.JButton();
        sPanel = new javax.swing.JScrollPane();
        buscarTabla = new javax.swing.JTable();
        salirButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buscarButton = new javax.swing.JButton();
        limpiarBuscadorButton = new javax.swing.JButton();
        nuevoButton = new javax.swing.JButton();
        administrarButton = new javax.swing.JButton();
        buscarDescripcionText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        buscarFechaInicioDateChooser = new com.toedter.calendar.JDateChooser();
        buscarEstadoProcesoComboBox = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        buscarFechaEntreDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel17 = new javax.swing.JLabel();
        buscarTanqueComboBox = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        buscarFechaFinDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        buscarProductoComboBox = new javax.swing.JComboBox();
        exportarTrazabilidadButton = new javax.swing.JButton();
        generarInformeButton = new javax.swing.JButton();
        iniciarButton = new javax.swing.JButton();
        detenerButton = new javax.swing.JButton();

        datosDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        datosDialog.setTitle("Proceso");
        datosDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        datosDialog.setLocationByPlatform(true);
        datosDialog.setMinimumSize(new java.awt.Dimension(560, 510));
        datosDialog.setName("datosDialog"); // NOI18N
        datosDialog.setResizable(false);
        datosDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                datosDialog_windowClosed(evt);
            }
        });

        datosPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Proceso"));
        datosPanel1.setName("datosPanel1"); // NOI18N

        jLabel7.setText("Descripción:");
        jLabel7.setName("jLabel7"); // NOI18N

        descripcionText.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        descripcionText.setName("txtTMarca"); // NOI18N

        limpiarDatosEntityButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/limpiar.png"))); // NOI18N
        limpiarDatosEntityButton.setText("Limpiar");
        limpiarDatosEntityButton.setName("limpiarDatosEntityButton"); // NOI18N
        limpiarDatosEntityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarDatosEntityButtonActionPerformed(evt);
            }
        });

        estadoComboBox.setModel(modelEstadoProceso);
        estadoComboBox.setName("estadoComboBox"); // NOI18N

        jLabel8.setText("Tanque:");
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel9.setText("Estado:");
        jLabel9.setName("jLabel9"); // NOI18N

        tanqueComboBox.setModel(modelTanque);
        tanqueComboBox.setName("tanqueComboBox"); // NOI18N

        jLabel10.setText("Fecha Inicio:");
        jLabel10.setName("jLabel10"); // NOI18N

        fechaInicioDateChooser.setName("fechaInicioDateChooser"); // NOI18N

        jLabel11.setText("Fecha Fin:");
        jLabel11.setName("jLabel11"); // NOI18N

        fechaFinDateChooser.setName("fechaFinDateChooser"); // NOI18N

        jLabel12.setText("Hora Inicio:");
        jLabel12.setName("jLabel12"); // NOI18N

        jLabel13.setText("Hora Fin:");
        jLabel13.setName("jLabel13"); // NOI18N

        horaInicioText.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        horaInicioText.setName("horaInicioText"); // NOI18N

        horaFinText.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        horaFinText.setName("horaFinText"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        sPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sPanel1.setName("sPanel1"); // NOI18N

        alarmaTemperaturaTabla.setAutoCreateRowSorter(true);
        alarmaTemperaturaTabla.setModel(modelTemperatura);
        alarmaTemperaturaTabla.setName("alarmaTemperaturaTabla"); // NOI18N
        alarmaTemperaturaTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alarmaTemperaturaTablaMouseClicked(evt);
            }
        });
        sPanel1.setViewportView(alarmaTemperaturaTabla);

        informeTemperaturaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/informe.png"))); // NOI18N
        informeTemperaturaButton.setText("Generar Informe");
        informeTemperaturaButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        informeTemperaturaButton.setName("informeTemperaturaButton"); // NOI18N
        informeTemperaturaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informeTemperaturaButton(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informeTemperaturaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(369, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addComponent(informeTemperaturaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(45, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Alarma Temperatura", jPanel1);

        jPanel2.setName("jPanel2"); // NOI18N

        sPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sPanel2.setName("sPanel2"); // NOI18N

        alarmaAzucarTabla.setAutoCreateRowSorter(true);
        alarmaAzucarTabla.setModel(modelAzucar);
        alarmaAzucarTabla.setName("alarmaAzucarTabla"); // NOI18N
        alarmaAzucarTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alarmaAzucarTablaMouseClicked(evt);
            }
        });
        sPanel2.setViewportView(alarmaAzucarTabla);

        informeAzucarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/informe.png"))); // NOI18N
        informeAzucarButton.setText("Generar Informe");
        informeAzucarButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        informeAzucarButton.setName("informeAzucarButton"); // NOI18N
        informeAzucarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informeAzucarButton(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informeAzucarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(369, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addComponent(informeAzucarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(45, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Alarma Nivel Azúcar", jPanel2);

        jPanel3.setName("jPanel3"); // NOI18N

        sPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sPanel3.setName("sPanel3"); // NOI18N

        alarmaContenidoTabla.setAutoCreateRowSorter(true);
        alarmaContenidoTabla.setModel(modelContenido);
        alarmaContenidoTabla.setName("alarmaContenidoTabla"); // NOI18N
        alarmaContenidoTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alarmaContenidoTablaMouseClicked(evt);
            }
        });
        sPanel3.setViewportView(alarmaContenidoTabla);

        InformeVolumenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/informe.png"))); // NOI18N
        InformeVolumenButton.setText("Generar Informe");
        InformeVolumenButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        InformeVolumenButton.setName("InformeVolumenButton"); // NOI18N
        InformeVolumenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InformeVolumenButton(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InformeVolumenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(369, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addComponent(InformeVolumenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(sPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(45, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Alarma Contenido", jPanel3);

        jPanel4.setName("jPanel4"); // NOI18N

        sPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sPanel4.setName("sPanel4"); // NOI18N

        alarmaRemontajeTabla.setAutoCreateRowSorter(true);
        alarmaRemontajeTabla.setModel(modelRemontaje);
        alarmaRemontajeTabla.setName("alarmaRemontajeTabla"); // NOI18N
        alarmaRemontajeTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alarmaRemontajeTablaMouseClicked(evt);
            }
        });
        sPanel4.setViewportView(alarmaRemontajeTabla);

        informeRemontajeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/informe.png"))); // NOI18N
        informeRemontajeButton.setText("Generar Informe");
        informeRemontajeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        informeRemontajeButton.setName("informeRemontajeButton"); // NOI18N
        informeRemontajeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informeRemontajeButton(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .addComponent(informeRemontajeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informeRemontajeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Alarma Remontaje", jPanel4);

        javax.swing.GroupLayout datosPanel1Layout = new javax.swing.GroupLayout(datosPanel1);
        datosPanel1.setLayout(datosPanel1Layout);
        datosPanel1Layout.setHorizontalGroup(
            datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosPanel1Layout.createSequentialGroup()
                .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datosPanel1Layout.createSequentialGroup()
                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(datosPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)))
                            .addGroup(datosPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7))
                            .addGroup(datosPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tanqueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(datosPanel1Layout.createSequentialGroup()
                                .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(descripcionText)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, datosPanel1Layout.createSequentialGroup()
                                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fechaInicioDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(horaFinText, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(horaInicioText, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(96, 96, 96)
                                .addComponent(limpiarDatosEntityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(datosPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)))
                .addContainerGap())
        );
        datosPanel1Layout.setVerticalGroup(
            datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosPanel1Layout.createSequentialGroup()
                .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datosPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(limpiarDatosEntityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(descripcionText, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel12)
                                .addComponent(horaInicioText, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fechaInicioDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(fechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel13)
                                .addComponent(horaFinText, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(datosPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(tanqueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(datosPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cerrarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/cerrar.png"))); // NOI18N
        cerrarButton.setText("Cerrar");
        cerrarButton.setName("cerrarButton"); // NOI18N
        cerrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarButtonActionPerformed(evt);
            }
        });

        guardarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/guardar.png"))); // NOI18N
        guardarButton.setText("Guardar");
        guardarButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        guardarButton.setName("guardarButton"); // NOI18N
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar(evt);
            }
        });

        detenerProcesoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/detener.png"))); // NOI18N
        detenerProcesoButton.setText("Detener");
        detenerProcesoButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        detenerProcesoButton.setName("detenerProcesoButton"); // NOI18N
        detenerProcesoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detenerProcesoButton(evt);
            }
        });

        javax.swing.GroupLayout datosDialogLayout = new javax.swing.GroupLayout(datosDialog.getContentPane());
        datosDialog.getContentPane().setLayout(datosDialogLayout);
        datosDialogLayout.setHorizontalGroup(
            datosDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datosDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datosPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(datosDialogLayout.createSequentialGroup()
                        .addComponent(guardarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detenerProcesoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                        .addComponent(cerrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        datosDialogLayout.setVerticalGroup(
            datosDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datosDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(datosPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(datosDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cerrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(detenerProcesoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setIconifiable(true);
        setTitle("Procesos");

        sPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Procesos"));
        sPanel.setName("sPanel"); // NOI18N

        buscarTabla.setAutoCreateRowSorter(true);
        buscarTabla.setModel(model);
        buscarTabla.setName("buscarTable"); // NOI18N
        buscarTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buscarTablaMouseClicked(evt);
            }
        });
        sPanel.setViewportView(buscarTabla);

        salirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/cerrar.png"))); // NOI18N
        salirButton.setText("Cerrar");
        salirButton.setName("salirButton"); // NOI18N
        salirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Descripción");
        jLabel1.setName("jLabel1"); // NOI18N

        buscarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/buscar.png"))); // NOI18N
        buscarButton.setText("Buscar");
        buscarButton.setName("buscarButton"); // NOI18N
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        limpiarBuscadorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/limpiar.png"))); // NOI18N
        limpiarBuscadorButton.setText("Limpiar");
        limpiarBuscadorButton.setName("limpiarBuscarButton"); // NOI18N
        limpiarBuscadorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarBuscadorButtonActionPerformed(evt);
            }
        });

        nuevoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/agregar.png"))); // NOI18N
        nuevoButton.setText("Nuevo");
        nuevoButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        nuevoButton.setName("nuevoButton"); // NOI18N
        nuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevo(evt);
            }
        });

        administrarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/administrar.png"))); // NOI18N
        administrarButton.setText("Administrar");
        administrarButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        administrarButton.setName("administrarButton"); // NOI18N
        administrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                administrarButton(evt);
            }
        });

        buscarDescripcionText.setName("buscarDescripcionText"); // NOI18N

        jLabel5.setText("Fecha Inicio");
        jLabel5.setName("jLabel5"); // NOI18N

        buscarFechaInicioDateChooser.setName("buscarFechaInicioDateChooser"); // NOI18N

        buscarEstadoProcesoComboBox.setModel(modelBuscarEstadoProceso);
        buscarEstadoProcesoComboBox.setName("buscarEstadoProcesoComboBox"); // NOI18N

        jLabel16.setText("Estado");
        jLabel16.setName("jLabel16"); // NOI18N

        buscarFechaEntreDateChooser.setName("buscarFechaEntreDateChooser"); // NOI18N

        jLabel17.setText("Fecha Fin");
        jLabel17.setName("jLabel17"); // NOI18N

        buscarTanqueComboBox.setModel(modelBuscarEstadoProceso);
        buscarTanqueComboBox.setName("buscarTanqueComboBox"); // NOI18N

        jLabel18.setText("Tanque");
        jLabel18.setName("jLabel18"); // NOI18N

        buscarFechaFinDateChooser.setName("buscarFechaFinDateChooser"); // NOI18N

        jLabel19.setText("Fecha Entre");
        jLabel19.setName("jLabel19"); // NOI18N

        jLabel20.setText("Producto");
        jLabel20.setName("jLabel20"); // NOI18N

        buscarProductoComboBox.setModel(modelBuscarEstadoProceso);
        buscarProductoComboBox.setName("buscarProductoComboBox"); // NOI18N

        exportarTrazabilidadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/trazabilidad.png"))); // NOI18N
        exportarTrazabilidadButton.setText("Exportar Trazabilidad");
        exportarTrazabilidadButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        exportarTrazabilidadButton.setName("exportarTrazabilidadButton"); // NOI18N
        exportarTrazabilidadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarTrazabilidadButton(evt);
            }
        });

        generarInformeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/informe.png"))); // NOI18N
        generarInformeButton.setText("Generar Informe");
        generarInformeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        generarInformeButton.setName("generarInformeButton"); // NOI18N
        generarInformeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarInformeButton(evt);
            }
        });

        iniciarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/iniciar.png"))); // NOI18N
        iniciarButton.setText("Iniciar Todos");
        iniciarButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        iniciarButton.setName("iniciarButton"); // NOI18N
        iniciarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarButton(evt);
            }
        });

        detenerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/utn/frm/ui/resources/image/detener.png"))); // NOI18N
        detenerButton.setText("Detener Todos");
        detenerButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        detenerButton.setName("detenerButton"); // NOI18N
        detenerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detenerButton(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nuevoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(administrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generarInformeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportarTrazabilidadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iniciarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detenerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(salirButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buscarFechaInicioDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel5))
                    .addComponent(buscarDescripcionText, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buscarEstadoProcesoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarFechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buscarFechaEntreDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(buscarTanqueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buscarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limpiarBuscadorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel20)
                    .addComponent(buscarProductoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(sPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel19)
                        .addComponent(jLabel20)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buscarFechaInicioDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarFechaFinDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarFechaEntreDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarProductoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buscarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(limpiarBuscadorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscarDescripcionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buscarEstadoProcesoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscarTanqueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nuevoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(salirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(administrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(exportarTrazabilidadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(generarInformeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(iniciarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(detenerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevo
        nuevo();
    }//GEN-LAST:event_nuevo

    private void buscarTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarTablaMouseClicked
        if (evt.getClickCount() > 1) {
            administrar();
        }
}//GEN-LAST:event_buscarTablaMouseClicked

    private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirButtonActionPerformed
        dispose();
}//GEN-LAST:event_salirButtonActionPerformed

    private void guardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar
        guardar();
    }//GEN-LAST:event_guardar

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        gestorAbm.getFilter().setDescripcion(buscarDescripcionText.getText());
        gestorAbm.getFilter().setEstadoProceso(modelBuscarEstadoProceso.getSelectedEntity());
        gestorAbm.getFilter().setFecha(buscarFechaEntreDateChooser.getDate());
        gestorAbm.getFilter().setFechaInicio(buscarFechaInicioDateChooser.getDate());
        gestorAbm.getFilter().setFechaFin(buscarFechaFinDateChooser.getDate());
        gestorAbm.getFilter().setProducto(modelBuscarProductos.getSelectedEntity());
        gestorAbm.getFilter().setTanque(modelBuscarTanque.getSelectedEntity());
        model.setRows(gestorAbm.buscar());
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void limpiarBuscadorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarBuscadorButtonActionPerformed
        buscarDescripcionText.setText("");
        buscarFechaEntreDateChooser.setDate(null);
        buscarFechaFinDateChooser.setDate(null);
        buscarFechaInicioDateChooser.setDate(null);
        modelBuscarEstadoProceso.setSelectedEntity(null);
        modelBuscarProductos.setSelectedEntity(null);
        modelBuscarTanque.setSelectedEntity(null);
        gestorAbm.getFilter().clear();
    }//GEN-LAST:event_limpiarBuscadorButtonActionPerformed

    private void limpiarDatosEntityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarDatosEntityButtonActionPerformed
        descripcionText.setText("");
        fechaFinDateChooser.setDate(null);
        fechaInicioDateChooser.setDate(null);
    }//GEN-LAST:event_limpiarDatosEntityButtonActionPerformed

    private void cerrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarButtonActionPerformed
        cerrar();
}//GEN-LAST:event_cerrarButtonActionPerformed

    private void datosDialog_windowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_datosDialog_windowClosed
        cerrar();
}//GEN-LAST:event_datosDialog_windowClosed

    private void administrarButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_administrarButton
        administrar();
    }//GEN-LAST:event_administrarButton

    private void exportarTrazabilidadButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarTrazabilidadButton
        exportarTrazabilidad();
    }//GEN-LAST:event_exportarTrazabilidadButton

    private void generarInformeButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarInformeButton
        try {
            gestorAbm.ejecutarReporte();
        } catch (ReporteException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error al generar el reporte", JOptionPane.ERROR_MESSAGE);
        }
}//GEN-LAST:event_generarInformeButton

    private void iniciarButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarButton
        try {
            GestorGeneralEstado.getInstance().iniciar();
        } catch (GestorGeneralEstadoException ex) {
            JOptionPane.showMessageDialog(this, "Ha fallado al tratar de iniciar los procesos");
        }
    }//GEN-LAST:event_iniciarButton

    private void detenerButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detenerButton
        try {
            GestorGeneralEstado.getInstance().detener();
        } catch (GestorGeneralEstadoException ex) {
            JOptionPane.showMessageDialog(this, "Ha fallado al tratar de detener los procesos");
        }
    }//GEN-LAST:event_detenerButton

    private void alarmaTemperaturaTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alarmaTemperaturaTablaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_alarmaTemperaturaTablaMouseClicked

    private void alarmaAzucarTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alarmaAzucarTablaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_alarmaAzucarTablaMouseClicked

    private void alarmaContenidoTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alarmaContenidoTablaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_alarmaContenidoTablaMouseClicked

    private void alarmaRemontajeTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alarmaRemontajeTablaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_alarmaRemontajeTablaMouseClicked

    private void detenerProcesoButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detenerProcesoButton
        detenerProceso();
    }//GEN-LAST:event_detenerProcesoButton

    private void informeTemperaturaButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informeTemperaturaButton
        generarInformeAlarmaTemperatura();
    }//GEN-LAST:event_informeTemperaturaButton

    private void informeAzucarButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informeAzucarButton
        generarInformeAlarmaAzucar();
    }//GEN-LAST:event_informeAzucarButton

    private void InformeVolumenButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InformeVolumenButton
        generarInformeAlarmaNivelContenido();
    }//GEN-LAST:event_InformeVolumenButton

    private void informeRemontajeButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informeRemontajeButton
        generarInformeAlarmaRemontaje();
    }//GEN-LAST:event_informeRemontajeButton
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton InformeVolumenButton;
    private javax.swing.JButton administrarButton;
    private javax.swing.JTable alarmaAzucarTabla;
    private javax.swing.JTable alarmaContenidoTabla;
    private javax.swing.JTable alarmaRemontajeTabla;
    private javax.swing.JTable alarmaTemperaturaTabla;
    private javax.swing.JButton buscarButton;
    private javax.swing.JTextField buscarDescripcionText;
    private javax.swing.JComboBox buscarEstadoProcesoComboBox;
    private com.toedter.calendar.JDateChooser buscarFechaEntreDateChooser;
    private com.toedter.calendar.JDateChooser buscarFechaFinDateChooser;
    private com.toedter.calendar.JDateChooser buscarFechaInicioDateChooser;
    private javax.swing.JComboBox buscarProductoComboBox;
    private javax.swing.JTable buscarTabla;
    private javax.swing.JComboBox buscarTanqueComboBox;
    private javax.swing.JButton cerrarButton;
    private javax.swing.JDialog datosDialog;
    private javax.swing.JPanel datosPanel1;
    private javax.swing.JTextField descripcionText;
    private javax.swing.JButton detenerButton;
    private javax.swing.JButton detenerProcesoButton;
    private javax.swing.JComboBox estadoComboBox;
    private javax.swing.JButton exportarTrazabilidadButton;
    private com.toedter.calendar.JDateChooser fechaFinDateChooser;
    private com.toedter.calendar.JDateChooser fechaInicioDateChooser;
    private javax.swing.JButton generarInformeButton;
    private javax.swing.JButton guardarButton;
    private javax.swing.JTextField horaFinText;
    private javax.swing.JTextField horaInicioText;
    private javax.swing.JButton informeAzucarButton;
    private javax.swing.JButton informeRemontajeButton;
    private javax.swing.JButton informeTemperaturaButton;
    private javax.swing.JButton iniciarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton limpiarBuscadorButton;
    private javax.swing.JButton limpiarDatosEntityButton;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JScrollPane sPanel;
    private javax.swing.JScrollPane sPanel1;
    private javax.swing.JScrollPane sPanel2;
    private javax.swing.JScrollPane sPanel3;
    private javax.swing.JScrollPane sPanel4;
    private javax.swing.JButton salirButton;
    private javax.swing.JComboBox tanqueComboBox;
    // End of variables declaration//GEN-END:variables

    private void cerrar() {
        reset();
        showDatosDialog(false);
    }

    private void nuevo() {
        gestorAbm.nuevo();
        bindinDataEntity(servidor);
        habilitarPanelDatos(true);
        showDatosDialog(true);
    }

    private void exportarTrazabilidad() {
        Proceso proceso = null;

        if (buscarTabla.getSelectedRow() != -1) {
            proceso = model.getRow(buscarTabla.getSelectedRow());
            if (proceso != null) {
                try{
                    FileExtensionFilter filter = new FileExtensionFilter.XmlFilter();
                    JFileChooser jFileChooser = gestorAbm.getJFileChooserInforme(filter);
                    new GestorExportarTrazabilidad(proceso,this, jFileChooser).exportar();
                    JOptionPane.showMessageDialog(this, "Se ha guardado el informe exitosamente");
                } catch (TrazabilidadException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
        if (proceso == null) {
            JOptionPane.showInternalMessageDialog(this, "Debe seleccionar un Proceso para exportar");
        }
    }

    private void administrar() {
        Proceso proceso = null;

        if (buscarTabla.getSelectedRow() != -1) {
            proceso = model.getRow(buscarTabla.getSelectedRow());
            if (proceso != null) {
                gestorAbm.setEntity(proceso);
                bindinDataEntity(servidor);
                habilitarPanelDatos(true);
                showDatosDialog(true);
            }
        }
        if (proceso == null) {
            JOptionPane.showInternalMessageDialog(this, "Debe seleccionar un Proceso para administrar");
        }
    }

    private boolean validarEstado(EstadoProceso estadoProcesoAnterior) {
        boolean valid = true;


        if (!estadoProcesoAnterior.equals(getEntity().getEstadoProceso())) {

            switch (estadoProcesoAnterior) {
                case CANCELADO:
                    switch (getEntity().getEstadoProceso()) {
                        case EN_ESPERA:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado en espera " +
                                    "si ha sido cancelado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                        case INICIADO:
                            //tratar de ver si se puede iniciar el proceso
                            //validar las fechas y la disponibilidad del tanque
                            try {
                                GestorGeneralEstado.getInstance().validarInicio(getEntity());
                                valid = true;
                            } catch (GestorGeneralEstadoException ex) {
                                JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puede iniciar el proceso", JOptionPane.ERROR_MESSAGE);
                                valid = false;
                            }
                            break;
                        case PAUSADO:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado pausado " +
                                    "porque no esta iniciado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                        case TERMINADO:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado terminado " +
                                    "porque no esta iniciado o pausado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                    }
                    break;
                case EN_ESPERA:
                    switch (getEntity().getEstadoProceso()) {
                        case CANCELADO:
                            valid = true;
                            break;
                        case INICIADO:
                            //tratar de ver si se puede iniciar el proceso
                            //validar las fechas y la disponibilidad del tanque
                            try {
                                GestorGeneralEstado.getInstance().validarInicio(getEntity());
                                valid = true;
                            } catch (GestorGeneralEstadoException ex) {
                                JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puede iniciar el proceso", JOptionPane.ERROR_MESSAGE);
                                valid = false;
                            }
                            break;
                        case PAUSADO:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado pausado " +
                                    "porque no esta iniciado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                        case TERMINADO:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado terminado " +
                                    "porque no esta iniciado o pausado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                    }
                    break;
                case INICIADO:
                    switch (getEntity().getEstadoProceso()) {
                        case CANCELADO:
                            //liberar recursos
                            try {
                                GestorGeneralEstado.getInstance().liberarRecursos(getEntity(), EstadoProceso.CANCELADO);
                                valid = true;
                            } catch (GestorGeneralEstadoException ex) {
                                JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puedo liberar los recursos del proceso", JOptionPane.ERROR_MESSAGE);
                                valid = false;
                            }
                            break;
                        case EN_ESPERA:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado en espera " +
                                    "porque esta iniciado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                        case PAUSADO:
                            valid = true;
                            break;
                        case TERMINADO:
                            //liberar recursos
                            try {
                                GestorGeneralEstado.getInstance().liberarRecursos(getEntity(), EstadoProceso.TERMINADO);
                                valid = true;
                            } catch (GestorGeneralEstadoException ex) {
                                JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puedo liberar los recursos del proceso", JOptionPane.ERROR_MESSAGE);
                                valid = false;
                            }
                            
                            break;
                    }
                    break;
                case PAUSADO:
                    switch (getEntity().getEstadoProceso()) {
                        case CANCELADO:
                            //liberar recursos
                            try {
                                GestorGeneralEstado.getInstance().liberarRecursos(getEntity(), EstadoProceso.CANCELADO);
                                valid = true;
                            } catch (GestorGeneralEstadoException ex) {
                                JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puedo liberar los recursos del proceso", JOptionPane.ERROR_MESSAGE);
                                valid = false;
                            }
                            break;
                        case EN_ESPERA:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado en espera " +
                                    "porque esta pausado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                        case INICIADO:
                            valid = true;
                            //tratar de ver si se puede iniciar el proceso
                            //validar las fechas y la disponibilidad del tanque
                            try {
                                GestorGeneralEstado.getInstance().validarInicio(getEntity());
                                valid = true;
                            } catch (GestorGeneralEstadoException ex) {
                                JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puede iniciar el proceso", JOptionPane.ERROR_MESSAGE);
                                valid = false;
                            }
                            break;
                        case TERMINADO:
                            //liberar recursos
                            try {
                                GestorGeneralEstado.getInstance().liberarRecursos(getEntity(), EstadoProceso.TERMINADO);
                                valid = true;
                            } catch (GestorGeneralEstadoException ex) {
                                JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puedo liberar los recursos del proceso", JOptionPane.ERROR_MESSAGE);
                                valid = false;
                            }
                            break;
                    }
                    break;
                case TERMINADO:
                    switch (getEntity().getEstadoProceso()) {
                        case CANCELADO:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado cancelado " +
                                    "porque no esta iniciado, pausado o en espera", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                        case EN_ESPERA:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado en espera " +
                                    "porque esta terminado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                        case INICIADO:
                            int status = JOptionPane.showConfirmDialog(this, "Está seguro que desea cambiar " +
                                    "el estado del proceso terminado a iniciado?", "Confirmación",
                                    JOptionPane.QUESTION_MESSAGE);
                            if (status == JOptionPane.OK_OPTION) {
                                //tratar de ver si se puede iniciar el proceso
                                //validar las fechas y la disponibilidad del tanque
                                try {
                                    GestorGeneralEstado.getInstance().validarInicio(getEntity());
                                    valid = true;
                                } catch (GestorGeneralEstadoException ex) {
                                    JOptionPane.showMessageDialog(datosDialog, ex.getMessage(), "No se puede iniciar el proceso", JOptionPane.ERROR_MESSAGE);
                                    valid = false;
                                }
                            } else {
                                valid = false;
                            }
                            break;
                        case PAUSADO:
                            JOptionPane.showMessageDialog(this, "No se puede poner en estado pausado " +
                                    "porque esta iniciado", "Estado inconsistente",
                                    JOptionPane.WARNING_MESSAGE);
                            valid = false;
                            break;
                    }
                    break;
            }
        }
        if (!valid) {
            getEntity().setEstadoProceso(estadoProcesoAnterior);
            modelEstadoProceso.setSelectedEntity(estadoProcesoAnterior);
        }
        return valid;
    }

    private void guardar() {
        EstadoProceso estadoProcesoAnterior = getEntity().getEstadoProceso();
        bindinDataEntity(cliente);
        try {

            if (DateOperations.compareMayorTime(getEntity().getFechaInicio(), getEntity().getFechaFin())) {
                JOptionPane.showMessageDialog(this, "La fecha inicio no puede ser mayor a la " +
                        "fecha fin", "Error de validación",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                DateOperations.stringToDate(horaInicioText.getText());
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(datosDialog, "La hora de inicio tiene un formato " +
                        "incorrecto.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                DateOperations.stringToDate(horaFinText.getText());
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(datosDialog, "La hora de fin tiene un formato " +
                        "incorrecto.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Date fechaProceso = DateOperations.setTimeInDate(getEntity().getFechaInicio(), getEntity().getHoraInicio());
            if (DateOperations.compareMayorTime(getEntity().getMostoEnTanque().getFechaIngreso(),
                    fechaProceso )) {
                JOptionPane.showMessageDialog(datosDialog, "La fecha de inicio del proceso no puede ser antes" +
                        " de la fecha de ingreso del producto.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (getEntity().isNew() && DateOperations.compareMayorTime(new Date(), fechaProceso)) {
                JOptionPane.showMessageDialog(datosDialog, "La fecha de inicio del proceso no puede ser antes" +
                        " de la fecha y hora de hoy.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            gestorAbm.valid();
            if (!validarEstado(estadoProcesoAnterior)) {
                return;
            }
            gestorAbm.guardar();
            reset();
            showDatosDialog(false);
        } catch (ValidateException ex) {
            JOptionPane.showMessageDialog(datosDialog, ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(datosDialog, ex.getMessage());
        }
    }

    private void showDatosDialog(boolean show) {
        if (show) {
            Utiles.centrarFormulario(datosDialog);
        }
        datosDialog.setVisible(show);
    }

    private void reset() {
        descripcionText.setText("");
        fechaFinDateChooser.setDate(null);
        fechaInicioDateChooser.setDate(null);
        setEntity(null);
        habilitarPanelDatos(false);
        model.setRows(gestorAbm.buscar());
    }

    public ProcesoAbm getGestorAbm() {
        return gestorAbm;
    }

    public void setGestorAbm(ProcesoAbm gestorAbm) {
        this.gestorAbm = gestorAbm;
    }

    public Proceso getEntity() {
        return gestorAbm.getEntity();
    }

    public void setEntity(Proceso entity) {
        this.gestorAbm.setEntity(entity);
    }

    private void habilitarPanelDatos(boolean habilitar) {
        descripcionText.setEnabled(habilitar);
        fechaFinDateChooser.setEnabled(habilitar);
        fechaInicioDateChooser.setEnabled(habilitar);
        cerrarButton.setEnabled(habilitar);
        guardarButton.setEnabled(habilitar);
        limpiarDatosEntityButton.setEnabled(habilitar);
        nuevoButton.setEnabled(true);
    }
    private final int cliente = 0;
    private final int servidor = 1;

    public void bindinDataEntity(int fuente) {
        if (fuente == servidor) {
            descripcionText.setText(getEntity().getDescripcion());
            fechaFinDateChooser.setDate(getEntity().getFechaFin());
            fechaInicioDateChooser.setDate(getEntity().getFechaInicio());
            String horaInicioString = DateOperations.toHHmmssString(getEntity().getHoraInicio(), ":");
            horaInicioText.setText(horaInicioString);
            String horaFinString = DateOperations.toHHmmssString(getEntity().getHoraFin(), ":");
            horaFinText.setText(horaFinString);
            modelEstadoProceso.setSelectedEntity(getEntity().getEstadoProceso());
            modelTanque.setSelectedEntity(getEntity().getTanque());

            modelAzucar.setRows(getEntity().getAlarmasNivelAzucar());
            modelContenido.setRows(getEntity().getAlarmasNivelCapacidad());
            modelRemontaje.setRows(getEntity().getAlarmasRemontaje());
            modelTemperatura.setRows(getEntity().getAlarmasTemperatura());
        } else if (fuente == cliente) {
            getEntity().setDescripcion(descripcionText.getText());
            getEntity().setFechaInicio(fechaInicioDateChooser.getDate());
            getEntity().setFechaFin(fechaFinDateChooser.getDate());
            try {
                Date tiempo = DateOperations.stringToDate(horaInicioText.getText());
                getEntity().setHoraInicio(tiempo);
            } catch (ParseException ex) {
                logger.error("Error al parsear la hora inicio." + ex.getMessage());
            }
            try {
                Date tiempo = DateOperations.stringToDate(horaFinText.getText());
                getEntity().setHoraFin(tiempo);
            } catch (ParseException ex) {
                logger.error("Error al parsear la hora fin." + ex.getMessage());
            }
            getEntity().setEstadoProceso(modelEstadoProceso.getSelectedEntity());
            getEntity().setTanque(modelTanque.getSelectedEntity());
        }
    }

    private List<EstadoProceso> buscarTodosEstadosProceso() {
        return Arrays.asList(EstadoProceso.values());
    }

    private List<Tanque> buscarTodosTanques() {
        return gestorAbm.buscarTodosTanques();
    }

    private List<MostoEnTanque> buscarTodosProductos() {
        return gestorAbm.buscarTodosProductos();
    }

    private void detenerProceso() {
        Proceso proceso = getEntity();
        if (proceso.getEstadoProceso().equals(EstadoProceso.INICIADO)) {
            try {
                GestorGeneralEstado.getInstance().liberarRecursos(proceso, EstadoProceso.PAUSADO);
                bindinDataEntity(servidor);
            } catch (GestorGeneralEstadoException ex) {
                JOptionPane.showMessageDialog(this, "No se puede detener el proceso", "Ha ocurrido un error", JOptionPane.ERROR);
            }
        }
    }

    private void generarInformeAlarmaTemperatura() {
        String fileName = "/edu/utn/frm/ui/resources/report/reportAlarmaTemperatura.jasper";

        HashMap hm = new HashMap();

        //hm.put("pf_cantVisualizadas",getEntity().getAlarmasTemperatura().size());
        //hm.put("pf_cantTotal",getEntity().getAlarmasTemperatura().size());

        gestorAbm.showPrintPreview("Informe de Alarmas de Temperatura", fileName, hm, getEntity().getAlarmasTemperatura());
    }

    private void generarInformeAlarmaAzucar() {
        String fileName = "/edu/utn/frm/ui/resources/report/reportAlarmaNivelAzucar.jasper";

        HashMap hm = new HashMap();

        //hm.put("pf_cantVisualizadas",getEntity().getAlarmasNivelAzucar().size());
        //hm.put("pf_cantTotal",getEntity().getAlarmasNivelAzucar().size());

        gestorAbm.showPrintPreview("Informe de Alarmas de Azúcar", fileName, hm, getEntity().getAlarmasNivelAzucar());
    }

    private void generarInformeAlarmaRemontaje() {
        String fileName = "/edu/utn/frm/ui/resources/report/reportAlarmaRemontaje.jasper";

        HashMap hm = new HashMap();

        //hm.put("pf_cantVisualizadas",getEntity().getAlarmasRemontaje().size());
        //hm.put("pf_cantTotal",getEntity().getAlarmasRemontaje().size());

        gestorAbm.showPrintPreview("Informe de Alarmas de Remontaje", fileName, hm, getEntity().getAlarmasRemontaje());
    }

    private void generarInformeAlarmaNivelContenido() {
        String fileName = "/edu/utn/frm/ui/resources/report/reportAlarmaNivelCapacidad.jasper";

        HashMap hm = new HashMap();

        //hm.put("pf_cantVisualizadas",getEntity().getAlarmasNivelCapacidad().size());
        //hm.put("pf_cantTotal",getEntity().getAlarmasNivelCapacidad().size());

        gestorAbm.showPrintPreview("Informe de Alarmas de Capacidad", fileName, hm, getEntity().getAlarmasNivelCapacidad());
    }
}
